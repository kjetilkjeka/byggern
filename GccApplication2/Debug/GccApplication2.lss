
GccApplication2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000028  00800100  00000508  0000059c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000508  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  00800128  00800128  000005c4  2**0
                  ALLOC
  3 .stab         00000738  00000000  00000000  000005c4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000000e7  00000000  00000000  00000cfc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000108  00000000  00000000  00000de8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000bf7  00000000  00000000  00000ef0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000005a3  00000000  00000000  00001ae7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000841  00000000  00000000  0000208a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001d4  00000000  00000000  000028cc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000039a  00000000  00000000  00002aa0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007b1  00000000  00000000  00002e3a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  000035eb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
   4:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   8:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  10:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  14:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  1c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  24:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  28:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  2c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  30:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  34:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  38:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  3c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  40:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  44:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  48:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  4c:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__vector_19>
  50:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  54:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  58:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  5c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  60:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  64:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  68:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  6c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>

00000070 <__ctors_end>:
  70:	11 24       	eor	r1, r1
  72:	1f be       	out	0x3f, r1	; 63
  74:	cf ef       	ldi	r28, 0xFF	; 255
  76:	d4 e0       	ldi	r29, 0x04	; 4
  78:	de bf       	out	0x3e, r29	; 62
  7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
  7c:	11 e0       	ldi	r17, 0x01	; 1
  7e:	a0 e0       	ldi	r26, 0x00	; 0
  80:	b1 e0       	ldi	r27, 0x01	; 1
  82:	e8 e0       	ldi	r30, 0x08	; 8
  84:	f5 e0       	ldi	r31, 0x05	; 5
  86:	02 c0       	rjmp	.+4      	; 0x8c <__do_copy_data+0x10>
  88:	05 90       	lpm	r0, Z+
  8a:	0d 92       	st	X+, r0
  8c:	a8 32       	cpi	r26, 0x28	; 40
  8e:	b1 07       	cpc	r27, r17
  90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0xc>

00000092 <__do_clear_bss>:
  92:	11 e0       	ldi	r17, 0x01	; 1
  94:	a8 e2       	ldi	r26, 0x28	; 40
  96:	b1 e0       	ldi	r27, 0x01	; 1
  98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
  9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
  9c:	a2 33       	cpi	r26, 0x32	; 50
  9e:	b1 07       	cpc	r27, r17
  a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
  a2:	0e 94 9c 00 	call	0x138	; 0x138 <main>
  a6:	0c 94 82 02 	jmp	0x504	; 0x504 <_exit>

000000aa <__bad_interrupt>:
  aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <USART_Transmit>:
}

void USART_Transmit( unsigned char data )
{
	//Wait for empty transmit buffer
	while ( !( UCSR0A & (1<<UDRE0)) ); // while(!UDRE0)
  ae:	5d 9b       	sbis	0x0b, 5	; 11
  b0:	fe cf       	rjmp	.-4      	; 0xae <USART_Transmit>
	// Put data into buffer, sends the data
	UDR0 = data;
  b2:	8c b9       	out	0x0c, r24	; 12
}
  b4:	08 95       	ret

000000b6 <USART_Receive>:

unsigned char USART_Receive( void )
{
	// Wait for data to be received
	while ( !(UCSR0A & (1<<RXC0)) )
  b6:	5f 9b       	sbis	0x0b, 7	; 11
  b8:	fe cf       	rjmp	.-4      	; 0xb6 <USART_Receive>
	;
	// Get and return received data from buffer
	return UDR0;
  ba:	8c b1       	in	r24, 0x0c	; 12
}
  bc:	08 95       	ret

000000be <__vector_19>:
	return receiveString;
}
*/

ISR(USART0_RXC_vect)
{
  be:	1f 92       	push	r1
  c0:	0f 92       	push	r0
  c2:	0f b6       	in	r0, 0x3f	; 63
  c4:	0f 92       	push	r0
  c6:	11 24       	eor	r1, r1
  c8:	2f 93       	push	r18
  ca:	3f 93       	push	r19
  cc:	4f 93       	push	r20
  ce:	5f 93       	push	r21
  d0:	6f 93       	push	r22
  d2:	7f 93       	push	r23
  d4:	8f 93       	push	r24
  d6:	9f 93       	push	r25
  d8:	af 93       	push	r26
  da:	bf 93       	push	r27
  dc:	ef 93       	push	r30
  de:	ff 93       	push	r31
	USART_Transmit(USART_Receive());
  e0:	0e 94 5b 00 	call	0xb6	; 0xb6 <USART_Receive>
  e4:	0e 94 57 00 	call	0xae	; 0xae <USART_Transmit>
	PORTB = 0;
  e8:	18 ba       	out	0x18, r1	; 24
}
  ea:	ff 91       	pop	r31
  ec:	ef 91       	pop	r30
  ee:	bf 91       	pop	r27
  f0:	af 91       	pop	r26
  f2:	9f 91       	pop	r25
  f4:	8f 91       	pop	r24
  f6:	7f 91       	pop	r23
  f8:	6f 91       	pop	r22
  fa:	5f 91       	pop	r21
  fc:	4f 91       	pop	r20
  fe:	3f 91       	pop	r19
 100:	2f 91       	pop	r18
 102:	0f 90       	pop	r0
 104:	0f be       	out	0x3f, r0	; 63
 106:	0f 90       	pop	r0
 108:	1f 90       	pop	r1
 10a:	18 95       	reti

0000010c <USART_Transmit_String>:

void USART_Transmit_String(unsigned char * transmitString )
{
 10c:	cf 93       	push	r28
 10e:	df 93       	push	r29
 110:	ec 01       	movw	r28, r24
	int i;
	for (i=0; transmitString[i] != NULL; i++)
 112:	88 81       	ld	r24, Y
 114:	88 23       	and	r24, r24
 116:	31 f0       	breq	.+12     	; 0x124 <USART_Transmit_String+0x18>
{
	USART_Transmit(USART_Receive());
	PORTB = 0;
}

void USART_Transmit_String(unsigned char * transmitString )
 118:	21 96       	adiw	r28, 0x01	; 1
{
	int i;
	for (i=0; transmitString[i] != NULL; i++)
	{
		USART_Transmit(transmitString[i]);
 11a:	0e 94 57 00 	call	0xae	; 0xae <USART_Transmit>
}

void USART_Transmit_String(unsigned char * transmitString )
{
	int i;
	for (i=0; transmitString[i] != NULL; i++)
 11e:	89 91       	ld	r24, Y+
 120:	88 23       	and	r24, r24
 122:	d9 f7       	brne	.-10     	; 0x11a <USART_Transmit_String+0xe>
	{
		USART_Transmit(transmitString[i]);
	}
	
}
 124:	df 91       	pop	r29
 126:	cf 91       	pop	r28
 128:	08 95       	ret

0000012a <USART_Init>:


void USART_Init( unsigned int ubrr )
{
	/* Set baud rate */
	UBRR0H = (unsigned char)(ubrr>>8);
 12a:	90 bd       	out	0x20, r25	; 32
	UBRR0L = (unsigned char)ubrr;
 12c:	89 b9       	out	0x09, r24	; 9
	/* Enable receiver and transmitter */
	UCSR0B = (1<<RXEN0)|(1<<TXEN0)|(1<<RXCIE0);
 12e:	88 e9       	ldi	r24, 0x98	; 152
 130:	8a b9       	out	0x0a, r24	; 10
	/* Set frame format: 8data, 2stop bit */
	UCSR0C = (1<<URSEL0)|(1<<USBS0)|(3<<UCSZ00);
 132:	8e e8       	ldi	r24, 0x8E	; 142
 134:	80 bd       	out	0x20, r24	; 32
}
 136:	08 95       	ret

00000138 <main>:
void USART_Transmit_String(unsigned char *transmitString );

int main(void)
{
	
	USART_Init(MYUBRR);	
 138:	8f e1       	ldi	r24, 0x1F	; 31
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	0e 94 95 00 	call	0x12a	; 0x12a <USART_Init>
	fdevopen(USART_Transmit, USART_Receive);
 140:	87 e5       	ldi	r24, 0x57	; 87
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	6b e5       	ldi	r22, 0x5B	; 91
 146:	70 e0       	ldi	r23, 0x00	; 0
 148:	0e 94 b6 00 	call	0x16c	; 0x16c <fdevopen>
	sei();
 14c:	78 94       	sei
	
	USART_Transmit_String("sending fungerer, ");
 14e:	80 e0       	ldi	r24, 0x00	; 0
 150:	91 e0       	ldi	r25, 0x01	; 1
 152:	0e 94 86 00 	call	0x10c	; 0x10c <USART_Transmit_String>
	printf("tester mottak\n");
 156:	83 e1       	ldi	r24, 0x13	; 19
 158:	91 e0       	ldi	r25, 0x01	; 1
 15a:	0e 94 00 01 	call	0x200	; 0x200 <puts>
 15e:	ff cf       	rjmp	.-2      	; 0x15e <main+0x26>

00000160 <USART_Flush>:


void USART_Flush( void )
{
	unsigned char dummy;
	while ( UCSR0A & (1<<RXC0) ) dummy = UDR0;
 160:	5f 9b       	sbis	0x0b, 7	; 11
 162:	03 c0       	rjmp	.+6      	; 0x16a <USART_Flush+0xa>
 164:	8c b1       	in	r24, 0x0c	; 12
 166:	5f 99       	sbic	0x0b, 7	; 11
 168:	fd cf       	rjmp	.-6      	; 0x164 <USART_Flush+0x4>
 16a:	08 95       	ret

0000016c <fdevopen>:
 16c:	0f 93       	push	r16
 16e:	1f 93       	push	r17
 170:	cf 93       	push	r28
 172:	df 93       	push	r29
 174:	8c 01       	movw	r16, r24
 176:	eb 01       	movw	r28, r22
 178:	00 97       	sbiw	r24, 0x00	; 0
 17a:	11 f4       	brne	.+4      	; 0x180 <fdevopen+0x14>
 17c:	20 97       	sbiw	r28, 0x00	; 0
 17e:	c1 f1       	breq	.+112    	; 0x1f0 <fdevopen+0x84>
 180:	81 e0       	ldi	r24, 0x01	; 1
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	6e e0       	ldi	r22, 0x0E	; 14
 186:	70 e0       	ldi	r23, 0x00	; 0
 188:	0e 94 2e 01 	call	0x25c	; 0x25c <calloc>
 18c:	fc 01       	movw	r30, r24
 18e:	00 97       	sbiw	r24, 0x00	; 0
 190:	89 f1       	breq	.+98     	; 0x1f4 <fdevopen+0x88>
 192:	80 e8       	ldi	r24, 0x80	; 128
 194:	83 83       	std	Z+3, r24	; 0x03
 196:	20 97       	sbiw	r28, 0x00	; 0
 198:	71 f0       	breq	.+28     	; 0x1b6 <fdevopen+0x4a>
 19a:	d3 87       	std	Z+11, r29	; 0x0b
 19c:	c2 87       	std	Z+10, r28	; 0x0a
 19e:	81 e8       	ldi	r24, 0x81	; 129
 1a0:	83 83       	std	Z+3, r24	; 0x03
 1a2:	80 91 28 01 	lds	r24, 0x0128
 1a6:	90 91 29 01 	lds	r25, 0x0129
 1aa:	00 97       	sbiw	r24, 0x00	; 0
 1ac:	21 f4       	brne	.+8      	; 0x1b6 <fdevopen+0x4a>
 1ae:	f0 93 29 01 	sts	0x0129, r31
 1b2:	e0 93 28 01 	sts	0x0128, r30
 1b6:	01 15       	cp	r16, r1
 1b8:	11 05       	cpc	r17, r1
 1ba:	e1 f0       	breq	.+56     	; 0x1f4 <fdevopen+0x88>
 1bc:	11 87       	std	Z+9, r17	; 0x09
 1be:	00 87       	std	Z+8, r16	; 0x08
 1c0:	83 81       	ldd	r24, Z+3	; 0x03
 1c2:	82 60       	ori	r24, 0x02	; 2
 1c4:	83 83       	std	Z+3, r24	; 0x03
 1c6:	80 91 2a 01 	lds	r24, 0x012A
 1ca:	90 91 2b 01 	lds	r25, 0x012B
 1ce:	00 97       	sbiw	r24, 0x00	; 0
 1d0:	89 f4       	brne	.+34     	; 0x1f4 <fdevopen+0x88>
 1d2:	f0 93 2b 01 	sts	0x012B, r31
 1d6:	e0 93 2a 01 	sts	0x012A, r30
 1da:	80 91 2c 01 	lds	r24, 0x012C
 1de:	90 91 2d 01 	lds	r25, 0x012D
 1e2:	00 97       	sbiw	r24, 0x00	; 0
 1e4:	39 f4       	brne	.+14     	; 0x1f4 <fdevopen+0x88>
 1e6:	f0 93 2d 01 	sts	0x012D, r31
 1ea:	e0 93 2c 01 	sts	0x012C, r30
 1ee:	02 c0       	rjmp	.+4      	; 0x1f4 <fdevopen+0x88>
 1f0:	e0 e0       	ldi	r30, 0x00	; 0
 1f2:	f0 e0       	ldi	r31, 0x00	; 0
 1f4:	cf 01       	movw	r24, r30
 1f6:	df 91       	pop	r29
 1f8:	cf 91       	pop	r28
 1fa:	1f 91       	pop	r17
 1fc:	0f 91       	pop	r16
 1fe:	08 95       	ret

00000200 <puts>:
 200:	0f 93       	push	r16
 202:	1f 93       	push	r17
 204:	cf 93       	push	r28
 206:	df 93       	push	r29
 208:	8c 01       	movw	r16, r24
 20a:	e0 91 2a 01 	lds	r30, 0x012A
 20e:	f0 91 2b 01 	lds	r31, 0x012B
 212:	83 81       	ldd	r24, Z+3	; 0x03
 214:	81 ff       	sbrs	r24, 1
 216:	1a c0       	rjmp	.+52     	; 0x24c <puts+0x4c>
 218:	c0 e0       	ldi	r28, 0x00	; 0
 21a:	d0 e0       	ldi	r29, 0x00	; 0
 21c:	05 c0       	rjmp	.+10     	; 0x228 <puts+0x28>
 21e:	09 95       	icall
 220:	00 97       	sbiw	r24, 0x00	; 0
 222:	11 f0       	breq	.+4      	; 0x228 <puts+0x28>
 224:	cf ef       	ldi	r28, 0xFF	; 255
 226:	df ef       	ldi	r29, 0xFF	; 255
 228:	f8 01       	movw	r30, r16
 22a:	81 91       	ld	r24, Z+
 22c:	8f 01       	movw	r16, r30
 22e:	60 91 2a 01 	lds	r22, 0x012A
 232:	70 91 2b 01 	lds	r23, 0x012B
 236:	db 01       	movw	r26, r22
 238:	18 96       	adiw	r26, 0x08	; 8
 23a:	ed 91       	ld	r30, X+
 23c:	fc 91       	ld	r31, X
 23e:	19 97       	sbiw	r26, 0x09	; 9
 240:	88 23       	and	r24, r24
 242:	69 f7       	brne	.-38     	; 0x21e <puts+0x1e>
 244:	8a e0       	ldi	r24, 0x0A	; 10
 246:	09 95       	icall
 248:	00 97       	sbiw	r24, 0x00	; 0
 24a:	11 f0       	breq	.+4      	; 0x250 <puts+0x50>
 24c:	cf ef       	ldi	r28, 0xFF	; 255
 24e:	df ef       	ldi	r29, 0xFF	; 255
 250:	ce 01       	movw	r24, r28
 252:	df 91       	pop	r29
 254:	cf 91       	pop	r28
 256:	1f 91       	pop	r17
 258:	0f 91       	pop	r16
 25a:	08 95       	ret

0000025c <calloc>:
 25c:	0f 93       	push	r16
 25e:	1f 93       	push	r17
 260:	cf 93       	push	r28
 262:	df 93       	push	r29
 264:	68 9f       	mul	r22, r24
 266:	80 01       	movw	r16, r0
 268:	69 9f       	mul	r22, r25
 26a:	10 0d       	add	r17, r0
 26c:	78 9f       	mul	r23, r24
 26e:	10 0d       	add	r17, r0
 270:	11 24       	eor	r1, r1
 272:	c8 01       	movw	r24, r16
 274:	0e 94 4c 01 	call	0x298	; 0x298 <malloc>
 278:	c8 2f       	mov	r28, r24
 27a:	d9 2f       	mov	r29, r25
 27c:	20 97       	sbiw	r28, 0x00	; 0
 27e:	31 f0       	breq	.+12     	; 0x28c <calloc+0x30>
 280:	8c 2f       	mov	r24, r28
 282:	60 e0       	ldi	r22, 0x00	; 0
 284:	70 e0       	ldi	r23, 0x00	; 0
 286:	a8 01       	movw	r20, r16
 288:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <memset>
 28c:	ce 01       	movw	r24, r28
 28e:	df 91       	pop	r29
 290:	cf 91       	pop	r28
 292:	1f 91       	pop	r17
 294:	0f 91       	pop	r16
 296:	08 95       	ret

00000298 <malloc>:
 298:	cf 93       	push	r28
 29a:	df 93       	push	r29
 29c:	ac 01       	movw	r20, r24
 29e:	82 30       	cpi	r24, 0x02	; 2
 2a0:	91 05       	cpc	r25, r1
 2a2:	10 f4       	brcc	.+4      	; 0x2a8 <malloc+0x10>
 2a4:	42 e0       	ldi	r20, 0x02	; 2
 2a6:	50 e0       	ldi	r21, 0x00	; 0
 2a8:	e0 91 30 01 	lds	r30, 0x0130
 2ac:	f0 91 31 01 	lds	r31, 0x0131
 2b0:	20 e0       	ldi	r18, 0x00	; 0
 2b2:	30 e0       	ldi	r19, 0x00	; 0
 2b4:	a0 e0       	ldi	r26, 0x00	; 0
 2b6:	b0 e0       	ldi	r27, 0x00	; 0
 2b8:	24 c0       	rjmp	.+72     	; 0x302 <malloc+0x6a>
 2ba:	80 81       	ld	r24, Z
 2bc:	91 81       	ldd	r25, Z+1	; 0x01
 2be:	84 17       	cp	r24, r20
 2c0:	95 07       	cpc	r25, r21
 2c2:	d0 f0       	brcs	.+52     	; 0x2f8 <malloc+0x60>
 2c4:	84 17       	cp	r24, r20
 2c6:	95 07       	cpc	r25, r21
 2c8:	71 f4       	brne	.+28     	; 0x2e6 <malloc+0x4e>
 2ca:	82 81       	ldd	r24, Z+2	; 0x02
 2cc:	93 81       	ldd	r25, Z+3	; 0x03
 2ce:	10 97       	sbiw	r26, 0x00	; 0
 2d0:	29 f0       	breq	.+10     	; 0x2dc <malloc+0x44>
 2d2:	13 96       	adiw	r26, 0x03	; 3
 2d4:	9c 93       	st	X, r25
 2d6:	8e 93       	st	-X, r24
 2d8:	12 97       	sbiw	r26, 0x02	; 2
 2da:	2c c0       	rjmp	.+88     	; 0x334 <malloc+0x9c>
 2dc:	90 93 31 01 	sts	0x0131, r25
 2e0:	80 93 30 01 	sts	0x0130, r24
 2e4:	27 c0       	rjmp	.+78     	; 0x334 <malloc+0x9c>
 2e6:	21 15       	cp	r18, r1
 2e8:	31 05       	cpc	r19, r1
 2ea:	19 f0       	breq	.+6      	; 0x2f2 <malloc+0x5a>
 2ec:	82 17       	cp	r24, r18
 2ee:	93 07       	cpc	r25, r19
 2f0:	18 f4       	brcc	.+6      	; 0x2f8 <malloc+0x60>
 2f2:	9c 01       	movw	r18, r24
 2f4:	bd 01       	movw	r22, r26
 2f6:	ef 01       	movw	r28, r30
 2f8:	92 81       	ldd	r25, Z+2	; 0x02
 2fa:	83 81       	ldd	r24, Z+3	; 0x03
 2fc:	df 01       	movw	r26, r30
 2fe:	e9 2f       	mov	r30, r25
 300:	f8 2f       	mov	r31, r24
 302:	30 97       	sbiw	r30, 0x00	; 0
 304:	d1 f6       	brne	.-76     	; 0x2ba <malloc+0x22>
 306:	21 15       	cp	r18, r1
 308:	31 05       	cpc	r19, r1
 30a:	f9 f0       	breq	.+62     	; 0x34a <malloc+0xb2>
 30c:	c9 01       	movw	r24, r18
 30e:	84 1b       	sub	r24, r20
 310:	95 0b       	sbc	r25, r21
 312:	84 30       	cpi	r24, 0x04	; 4
 314:	91 05       	cpc	r25, r1
 316:	80 f4       	brcc	.+32     	; 0x338 <malloc+0xa0>
 318:	8a 81       	ldd	r24, Y+2	; 0x02
 31a:	9b 81       	ldd	r25, Y+3	; 0x03
 31c:	61 15       	cp	r22, r1
 31e:	71 05       	cpc	r23, r1
 320:	21 f0       	breq	.+8      	; 0x32a <malloc+0x92>
 322:	fb 01       	movw	r30, r22
 324:	93 83       	std	Z+3, r25	; 0x03
 326:	82 83       	std	Z+2, r24	; 0x02
 328:	04 c0       	rjmp	.+8      	; 0x332 <malloc+0x9a>
 32a:	90 93 31 01 	sts	0x0131, r25
 32e:	80 93 30 01 	sts	0x0130, r24
 332:	fe 01       	movw	r30, r28
 334:	32 96       	adiw	r30, 0x02	; 2
 336:	42 c0       	rjmp	.+132    	; 0x3bc <malloc+0x124>
 338:	fe 01       	movw	r30, r28
 33a:	e8 0f       	add	r30, r24
 33c:	f9 1f       	adc	r31, r25
 33e:	41 93       	st	Z+, r20
 340:	51 93       	st	Z+, r21
 342:	02 97       	sbiw	r24, 0x02	; 2
 344:	99 83       	std	Y+1, r25	; 0x01
 346:	88 83       	st	Y, r24
 348:	39 c0       	rjmp	.+114    	; 0x3bc <malloc+0x124>
 34a:	80 91 2e 01 	lds	r24, 0x012E
 34e:	90 91 2f 01 	lds	r25, 0x012F
 352:	00 97       	sbiw	r24, 0x00	; 0
 354:	41 f4       	brne	.+16     	; 0x366 <malloc+0xce>
 356:	80 91 23 01 	lds	r24, 0x0123
 35a:	90 91 24 01 	lds	r25, 0x0124
 35e:	90 93 2f 01 	sts	0x012F, r25
 362:	80 93 2e 01 	sts	0x012E, r24
 366:	20 91 21 01 	lds	r18, 0x0121
 36a:	30 91 22 01 	lds	r19, 0x0122
 36e:	21 15       	cp	r18, r1
 370:	31 05       	cpc	r19, r1
 372:	41 f4       	brne	.+16     	; 0x384 <malloc+0xec>
 374:	2d b7       	in	r18, 0x3d	; 61
 376:	3e b7       	in	r19, 0x3e	; 62
 378:	80 91 25 01 	lds	r24, 0x0125
 37c:	90 91 26 01 	lds	r25, 0x0126
 380:	28 1b       	sub	r18, r24
 382:	39 0b       	sbc	r19, r25
 384:	e0 91 2e 01 	lds	r30, 0x012E
 388:	f0 91 2f 01 	lds	r31, 0x012F
 38c:	e2 17       	cp	r30, r18
 38e:	f3 07       	cpc	r31, r19
 390:	98 f4       	brcc	.+38     	; 0x3b8 <malloc+0x120>
 392:	2e 1b       	sub	r18, r30
 394:	3f 0b       	sbc	r19, r31
 396:	24 17       	cp	r18, r20
 398:	35 07       	cpc	r19, r21
 39a:	70 f0       	brcs	.+28     	; 0x3b8 <malloc+0x120>
 39c:	ca 01       	movw	r24, r20
 39e:	02 96       	adiw	r24, 0x02	; 2
 3a0:	28 17       	cp	r18, r24
 3a2:	39 07       	cpc	r19, r25
 3a4:	48 f0       	brcs	.+18     	; 0x3b8 <malloc+0x120>
 3a6:	8e 0f       	add	r24, r30
 3a8:	9f 1f       	adc	r25, r31
 3aa:	90 93 2f 01 	sts	0x012F, r25
 3ae:	80 93 2e 01 	sts	0x012E, r24
 3b2:	41 93       	st	Z+, r20
 3b4:	51 93       	st	Z+, r21
 3b6:	02 c0       	rjmp	.+4      	; 0x3bc <malloc+0x124>
 3b8:	e0 e0       	ldi	r30, 0x00	; 0
 3ba:	f0 e0       	ldi	r31, 0x00	; 0
 3bc:	cf 01       	movw	r24, r30
 3be:	df 91       	pop	r29
 3c0:	cf 91       	pop	r28
 3c2:	08 95       	ret

000003c4 <free>:
 3c4:	0f 93       	push	r16
 3c6:	1f 93       	push	r17
 3c8:	cf 93       	push	r28
 3ca:	df 93       	push	r29
 3cc:	9c 01       	movw	r18, r24
 3ce:	00 97       	sbiw	r24, 0x00	; 0
 3d0:	09 f4       	brne	.+2      	; 0x3d4 <free+0x10>
 3d2:	8c c0       	rjmp	.+280    	; 0x4ec <free+0x128>
 3d4:	dc 01       	movw	r26, r24
 3d6:	12 97       	sbiw	r26, 0x02	; 2
 3d8:	13 96       	adiw	r26, 0x03	; 3
 3da:	1c 92       	st	X, r1
 3dc:	1e 92       	st	-X, r1
 3de:	12 97       	sbiw	r26, 0x02	; 2
 3e0:	60 91 30 01 	lds	r22, 0x0130
 3e4:	70 91 31 01 	lds	r23, 0x0131
 3e8:	61 15       	cp	r22, r1
 3ea:	71 05       	cpc	r23, r1
 3ec:	89 f4       	brne	.+34     	; 0x410 <free+0x4c>
 3ee:	8d 91       	ld	r24, X+
 3f0:	9c 91       	ld	r25, X
 3f2:	11 97       	sbiw	r26, 0x01	; 1
 3f4:	82 0f       	add	r24, r18
 3f6:	93 1f       	adc	r25, r19
 3f8:	20 91 2e 01 	lds	r18, 0x012E
 3fc:	30 91 2f 01 	lds	r19, 0x012F
 400:	28 17       	cp	r18, r24
 402:	39 07       	cpc	r19, r25
 404:	69 f5       	brne	.+90     	; 0x460 <free+0x9c>
 406:	b0 93 2f 01 	sts	0x012F, r27
 40a:	a0 93 2e 01 	sts	0x012E, r26
 40e:	6e c0       	rjmp	.+220    	; 0x4ec <free+0x128>
 410:	fb 01       	movw	r30, r22
 412:	40 e0       	ldi	r20, 0x00	; 0
 414:	50 e0       	ldi	r21, 0x00	; 0
 416:	01 c0       	rjmp	.+2      	; 0x41a <free+0x56>
 418:	fc 01       	movw	r30, r24
 41a:	ea 17       	cp	r30, r26
 41c:	fb 07       	cpc	r31, r27
 41e:	30 f4       	brcc	.+12     	; 0x42c <free+0x68>
 420:	82 81       	ldd	r24, Z+2	; 0x02
 422:	93 81       	ldd	r25, Z+3	; 0x03
 424:	af 01       	movw	r20, r30
 426:	00 97       	sbiw	r24, 0x00	; 0
 428:	b9 f7       	brne	.-18     	; 0x418 <free+0x54>
 42a:	1f c0       	rjmp	.+62     	; 0x46a <free+0xa6>
 42c:	e9 01       	movw	r28, r18
 42e:	22 97       	sbiw	r28, 0x02	; 2
 430:	fb 83       	std	Y+3, r31	; 0x03
 432:	ea 83       	std	Y+2, r30	; 0x02
 434:	08 81       	ld	r16, Y
 436:	19 81       	ldd	r17, Y+1	; 0x01
 438:	c9 01       	movw	r24, r18
 43a:	80 0f       	add	r24, r16
 43c:	91 1f       	adc	r25, r17
 43e:	8e 17       	cp	r24, r30
 440:	9f 07       	cpc	r25, r31
 442:	59 f4       	brne	.+22     	; 0x45a <free+0x96>
 444:	80 81       	ld	r24, Z
 446:	91 81       	ldd	r25, Z+1	; 0x01
 448:	80 0f       	add	r24, r16
 44a:	91 1f       	adc	r25, r17
 44c:	02 96       	adiw	r24, 0x02	; 2
 44e:	99 83       	std	Y+1, r25	; 0x01
 450:	88 83       	st	Y, r24
 452:	82 81       	ldd	r24, Z+2	; 0x02
 454:	93 81       	ldd	r25, Z+3	; 0x03
 456:	9b 83       	std	Y+3, r25	; 0x03
 458:	8a 83       	std	Y+2, r24	; 0x02
 45a:	41 15       	cp	r20, r1
 45c:	51 05       	cpc	r21, r1
 45e:	29 f4       	brne	.+10     	; 0x46a <free+0xa6>
 460:	b0 93 31 01 	sts	0x0131, r27
 464:	a0 93 30 01 	sts	0x0130, r26
 468:	41 c0       	rjmp	.+130    	; 0x4ec <free+0x128>
 46a:	fa 01       	movw	r30, r20
 46c:	b3 83       	std	Z+3, r27	; 0x03
 46e:	a2 83       	std	Z+2, r26	; 0x02
 470:	c1 91       	ld	r28, Z+
 472:	d1 91       	ld	r29, Z+
 474:	ec 0f       	add	r30, r28
 476:	fd 1f       	adc	r31, r29
 478:	ae 17       	cp	r26, r30
 47a:	bf 07       	cpc	r27, r31
 47c:	81 f4       	brne	.+32     	; 0x49e <free+0xda>
 47e:	f9 01       	movw	r30, r18
 480:	92 91       	ld	r25, -Z
 482:	82 91       	ld	r24, -Z
 484:	8c 0f       	add	r24, r28
 486:	9d 1f       	adc	r25, r29
 488:	02 96       	adiw	r24, 0x02	; 2
 48a:	da 01       	movw	r26, r20
 48c:	11 96       	adiw	r26, 0x01	; 1
 48e:	9c 93       	st	X, r25
 490:	8e 93       	st	-X, r24
 492:	82 81       	ldd	r24, Z+2	; 0x02
 494:	93 81       	ldd	r25, Z+3	; 0x03
 496:	13 96       	adiw	r26, 0x03	; 3
 498:	9c 93       	st	X, r25
 49a:	8e 93       	st	-X, r24
 49c:	12 97       	sbiw	r26, 0x02	; 2
 49e:	e0 e0       	ldi	r30, 0x00	; 0
 4a0:	f0 e0       	ldi	r31, 0x00	; 0
 4a2:	02 c0       	rjmp	.+4      	; 0x4a8 <free+0xe4>
 4a4:	fb 01       	movw	r30, r22
 4a6:	bc 01       	movw	r22, r24
 4a8:	db 01       	movw	r26, r22
 4aa:	12 96       	adiw	r26, 0x02	; 2
 4ac:	8d 91       	ld	r24, X+
 4ae:	9c 91       	ld	r25, X
 4b0:	13 97       	sbiw	r26, 0x03	; 3
 4b2:	00 97       	sbiw	r24, 0x00	; 0
 4b4:	b9 f7       	brne	.-18     	; 0x4a4 <free+0xe0>
 4b6:	cb 01       	movw	r24, r22
 4b8:	02 96       	adiw	r24, 0x02	; 2
 4ba:	2d 91       	ld	r18, X+
 4bc:	3c 91       	ld	r19, X
 4be:	11 97       	sbiw	r26, 0x01	; 1
 4c0:	82 0f       	add	r24, r18
 4c2:	93 1f       	adc	r25, r19
 4c4:	20 91 2e 01 	lds	r18, 0x012E
 4c8:	30 91 2f 01 	lds	r19, 0x012F
 4cc:	28 17       	cp	r18, r24
 4ce:	39 07       	cpc	r19, r25
 4d0:	69 f4       	brne	.+26     	; 0x4ec <free+0x128>
 4d2:	30 97       	sbiw	r30, 0x00	; 0
 4d4:	29 f4       	brne	.+10     	; 0x4e0 <free+0x11c>
 4d6:	10 92 31 01 	sts	0x0131, r1
 4da:	10 92 30 01 	sts	0x0130, r1
 4de:	02 c0       	rjmp	.+4      	; 0x4e4 <free+0x120>
 4e0:	13 82       	std	Z+3, r1	; 0x03
 4e2:	12 82       	std	Z+2, r1	; 0x02
 4e4:	70 93 2f 01 	sts	0x012F, r23
 4e8:	60 93 2e 01 	sts	0x012E, r22
 4ec:	df 91       	pop	r29
 4ee:	cf 91       	pop	r28
 4f0:	1f 91       	pop	r17
 4f2:	0f 91       	pop	r16
 4f4:	08 95       	ret

000004f6 <memset>:
 4f6:	dc 01       	movw	r26, r24
 4f8:	01 c0       	rjmp	.+2      	; 0x4fc <memset+0x6>
 4fa:	6d 93       	st	X+, r22
 4fc:	41 50       	subi	r20, 0x01	; 1
 4fe:	50 40       	sbci	r21, 0x00	; 0
 500:	e0 f7       	brcc	.-8      	; 0x4fa <memset+0x4>
 502:	08 95       	ret

00000504 <_exit>:
 504:	f8 94       	cli

00000506 <__stop_program>:
 506:	ff cf       	rjmp	.-2      	; 0x506 <__stop_program>
